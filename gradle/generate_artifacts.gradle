/*
 * Copyright (c) 2018 Uber Technologies
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def kotlinAndroidArtifactTasks() {
    if (!project.plugins.hasPlugin('org.jetbrains.dokka-android')) {
        throw new GradleException("Apply the dokka-android plugin in ${project.name}")
    }

    dokka {
        externalDocumentationLink {
            url = new URL("http://reactivex.io/RxJava/2.x/javadoc/")
        }

        outputFormat = 'html'
        outputDirectory = "$buildDir/docs/kdoc"
        sourceDirs = android.sourceSets.main.java.srcDirs
    }

    task docJar(type: Jar, dependsOn: dokka) {
        classifier = 'javadoc'
        from dokka.outputDirectory
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
}

def kotlinArtifactTasks() {
    if (!project.plugins.hasPlugin('org.jetbrains.dokka')) {
        throw new GradleException("Apply the dokka plugin in ${project.name}")
    }

    dokka {
        externalDocumentationLink {
            url = new URL("http://reactivex.io/RxJava/2.x/javadoc/")
        }

        outputFormat = 'html'
        outputDirectory = "$buildDir/docs/kdoc"
        sourceDirs = sourceSets.main.allSource
    }

    task docJar(type: Jar, dependsOn: dokka) {
        classifier = 'javadoc'
        from dokka.outputDirectory
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

def androidArtifactTasks() {
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs

        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        exclude '**/internal/*'

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task docJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }
}

def javaArtifactTasks() {
    task javaJavadoc(type: Javadoc) {
        source = sourceSets.main.allSource

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task docJar(type: Jar, dependsOn: javaJavadoc) {
        classifier = 'javadoc'
        from javaJavadoc.destinationDir
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource.srcDirs
    }
}

if (project.getPlugins().hasPlugin('com.android.library')) {
    if (project.plugins.hasPlugin('kotlin-android')) {
        kotlinAndroidArtifactTasks()
    } else {
        androidArtifactTasks()
    }
} else {
    if (project.plugins.hasPlugin('kotlin')) {
        kotlinArtifactTasks()
    } else {
        javaArtifactTasks()
    }
}

artifacts {
    archives sourceJar
    archives docJar
}